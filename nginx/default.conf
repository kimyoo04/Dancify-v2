# 캐싱 관리를 위한 설정
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=60m use_temp_path=off;

upstream nextjs_upstream {
    server nextjs:3000;
}

upstream django_upstream {
    server 아이피주소:8000;
}

server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name 도메인명;

    add_header Access-Control-Allow-Origin $http_origin;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
    add_header Access-Control-Expose-Headers "Content-Length,Content-Range";
    add_header Access-Control-Allow-Credentials "true";
    add_header Access-Control-Max-Age 7200;


    # SSL 인증서와 개인 키 파일 경로 설정
    ssl_certificate /etc/letsencrypt/archive/도메인명/fullchain1.pem;
    ssl_certificate_key /etc/letsencrypt/archive/도메인명/privkey1.pem;

    # gzip compression 설정
    gzip on;
    # 클라이언트에게 gzip으로 응답하는 설정
    gzip_proxied any;
    # gzip의 강도, cpu 부하 영향
    gzip_comp_level 2;
    # gzip 압축을 적용할 최소 응답 크기 설정
    gzip_min_length 256;
    # gzip 압축이 적용된 응답에 Vary 헤더 포함
    gzip_vary on;
    # gzip을 할 확장자
    gzip_types application/javascript text/css text/xml text/plain application/x-javascript application/xml application/xml+rss;


    location /api {
        proxy_pass         http://django_upstream;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection 'upgrade';
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_cache_bypass $http_upgrade;

        # 클라이언트 요청 바디의 최대 허용 크기 설정
        client_max_body_size 200m;
        # 클라이언트 요청 바디를 읽는 버퍼 크기 설정. 기본값 8k
        client_body_buffer_size 128k;
        # 클라이언트와의 연결 유지 시간 설정
        keepalive_timeout 240s;
        # 클라이언트와의 연결이 끊길 때까지의 대기 시간 설정
        send_timeout 240s;

        # 프록시 서버와의 연결 시도 시간 초과 설정
        proxy_connect_timeout 240s;
        # 프록시 서버로의 데이터 전송 시간 초과 설정
        proxy_send_timeout 240s;
        # 프록시 서버로부터 데이터 수신 시간 초과 설정
        proxy_read_timeout 240s;

        # 프록시 서버의 버퍼 크기 설정
        proxy_buffer_size 4k;
        # 프록시 서버의 버퍼 개수와 각 버퍼의 크기 설정
        proxy_buffers 4 32k;
        # 프록시 서버에서 사용 중인 버퍼의 최대 크기 설정
        proxy_busy_buffers_size 64k;
        # 프록시 서버에 임시 파일을 쓰는 버퍼의 크기 설정
        proxy_temp_file_write_size 64k;
    }

    location /.well-known/acme-challenge {
    	root /var/lib/letsencrypt/;
    }

    location / {
        proxy_pass         http://nextjs_upstream;
        proxy_http_version 1.1;
        proxy_set_header   Connection "Upgrade";
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_cache_bypass $http_upgrade;

        # 클라이언트 요청 바디의 최대 허용 크기 설정
        client_max_body_size 200m;
        # 클라이언트 요청 바디를 읽는 버퍼 크기 설정. 기본값 8k
        client_body_buffer_size 128k;
        # 클라이언트와의 연결 유지 시간 설정
        keepalive_timeout 240s;
        # 클라이언트와의 연결이 끊길 때까지의 대기 시간 설정
        send_timeout 240s;

        # 프록시 서버와의 연결 시도 시간 초과 설정
        proxy_connect_timeout 240s;
        # 프록시 서버로의 데이터 전송 시간 초과 설정
        proxy_send_timeout 240s;
        # 프록시 서버로부터 데이터 수신 시간 초과 설정
        proxy_read_timeout 240s;

        # 프록시 서버의 버퍼 크기 설정
        proxy_buffer_size 4k;
        # 프록시 서버의 버퍼 개수와 각 버퍼의 크기 설정
        proxy_buffers 4 32k;
        # 프록시 서버에서 사용 중인 버퍼의 최대 크기 설정
        proxy_busy_buffers_size 64k;
        # 프록시 서버에 임시 파일을 쓰는 버퍼의 크기 설정
        proxy_temp_file_write_size 64k;
    }
}